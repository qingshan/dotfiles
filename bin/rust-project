#!/usr/bin/env bash

directory="."

while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--directory)
      directory="$2"
      shift 2
      ;;
    -h|--help)
      # Print help
      echo "Usage: tmux-project -d [directory] [cmd] -- arguments".
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*|--*)
      echo "${0}: invalid option -- '${1}'"
      exit 1
      ;;
    *)
      positional_args+=("$1")
      shift
      ;;
  esac
done

cmd=${positional_args[0]}
file=${positional_args[1]}

function find_cargo_packages() {
  cargo metadata -q --no-deps --format-version 1 \
      | jq -r ".packages[] | .name"
}

function find_cargo_targets() {
  cargo metadata -q --no-deps --format-version 1 \
    | jq -r '
      .workspace_members as $members | .packages
      | map(select(.id as $id | $members[] | contains($id) ))
      | map(.targets)[] | map(select(.kind[] | contains($kind)))[]
      | .name' --arg kind "$1"
}

function cargo_run_targets() {
  find_cargo_targets "bin" | awk '{print "--bin", $1}'
  find_cargo_targets "example" | awk '{print "--example", $1}'
}

function cargo_all_targets() {
  find_cargo_packages | awk '{print "--package", $1}'
  find_cargo_targets "bin" | awk '{print "--bin", $1}'
  find_cargo_targets "example" | awk '{print "--example", $1}'
  find_cargo_targets "test" | awk '{print "--test", $1}'
  find_cargo_targets "bench" | awk '{print "--bench", $1}'
}

function cargo_test_names() {
  RUSTFLAGS=-Awarnings cargo test -q -- --list --format=terse \
    | awk '/: test$/ { print substr($1, 1, length($1) - 1) }' \
    | sort \
    | uniq
}

function cargo_package_name() {
  file_name="$1"
  cd `dirname $file_name`
  cargo read-manifest | jq -r '.name'
}

function cargo_test_name() {
  file_name="$1"
  package_name="$2"
  function_name="$3"
  file_name=${file_name#"$package_name/"}
  if [[ $file_name == tests/* ]]; then
    test_name=${file_name#tests/}
    test_name=${test_name%.rs}
    if [ -z "$function_name" ]; then
      echo "--test $test_name"
    else
      echo "--test $test_name -- $function_name"
    fi
  else
    test_name=${file_name#src/}
    test_name=${test_name%.rs}
    test_name=${test_name//\//::}
    if [ "$test_name" = "lib" ] || [ "$test_name" = "mod" ] || [ "$test_name" = "main" ]; then
      test_name="tests::$function_name"
    else
      test_name="$test_name::tests::$function_name"
    fi
    if [ -z "$function_name" ]; then
      echo "-- $test_name"
    else
      echo "-- $test_name --exact"
    fi
  fi
}

function cargo_function_name() {
  file_name="$1"
  file_line="$2"
  function_name=$(head -$file_line $file_name | grep -A 1 -E '^ *#\[test\]$' | grep -E '\s*(async )?fn\s+' | tail -1 | gsed -E 's/\s*(async )?fn\s+(\w+)\(.*/\2/')
  if [ -z "$function_name" ]; then
    function_name=$(cat $file_name | grep -A 1 -E '^ *#\[test\]$' | grep -E '\s*(async )?fn\s+' | head -1 | gsed -E 's/\s*(async )?fn\s+(\w+)\(.*/\2/')
  fi
  echo "$function_name"
}

function rust_file_name() {
  echo $1 | awk -F ':' '{print $1}'
}

function rust_file_line() {
  echo $1 | awk -F ':' '{print $2}'
}

cd "$directory"

case $cmd in
  build)
    cargo_all_targets | awk '{print "cargo", "build", $1, $2}'
    ;;
  run)
    cargo_run_targets | awk '{print "cargo", "run", $1, $2}'
    ;;
  test)
    cargo_all_targets | awk '{print "cargo", "test", $1, $2}'
    cargo_test_names | awk '{print "cargo", "test", "--", $1}'
    ;;
  build-package|run-package|test-package)
    file_name=$(rust_file_name $file)
    package_name=$(cargo_package_name $file_name)
    echo "cargo ${cmd%-package} --package $package_name"
    ;;
  test-function)
    file_name=$(rust_file_name $file)
    file_line=$(rust_file_line $file)
    package_name=$(cargo_package_name $file_name)
    function_name=$(cargo_function_name $file_name $file_line)
    test_name=$(cargo_test_name $file_name $package_name $function_name)
    echo "cargo ${cmd%-function} --package $package_name $test_name"
    ;;
  test-file)
    file_name=$(rust_file_name $file)
    package_name=$(cargo_package_name $file_name)
    test_name=$(cargo_test_name $file_name $package_name)
    echo "cargo ${cmd%-file} --package $package_name $test_name"
    ;;
  run-all)
    echo "cargo run"
    ;;
  build-all|test-all)
    echo "cargo ${cmd%-all} --all-targets"
    ;;
  all)
    $0 build
    $0 run
    $0 test
    ;;
  *)
    exit 1
    ;;
esac
