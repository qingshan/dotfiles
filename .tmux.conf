# remap prefix from 'C-b' to 'C-\'
set-option -g prefix 'C-\'
unbind-key C-b
bind-key 'C-\' send-prefix

# disable the repeat
set-option -g repeat-time 0

# start window numbers at 1 to match keyboard order with tmux window order
set-option -g base-index 1
set-window-option -g pane-base-index 1

# renumber windows sequentially after closing any of them
set-option -g renumber-windows on

# auto window rename
set-option -g automatic-rename on

# enable activity alerts
set-window-option -g monitor-activity on
set-option -g visual-activity on

# increase scrollback lines
set-option -g history-limit 50000

# enable clipboard
set-option -g set-clipboard on

# mouse behavior
set-option -g mouse on

# disable escape delay
set-option -sg escape-time 0

# truecolor support
set-option -ga terminal-overrides ",xterm-256color:Tc"

# default terminal is 256 colors
set-option -g default-terminal "xterm-256color"

# aggressive resize
set-window-option -g aggressive-resize off

# iTerm2 window name
set-option -g set-titles on

# moving between panes.
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# resize panes with vim movement keys
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# remove confirmation questions when closing windows/panes
bind-key x kill-pane
bind-key & kill-window

# go to last window
bind-key ^ last-window

# splitting panes with current path
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

# move panes to another window
bind-key M-1 if-shell 'tmux move-pane -h -t :1' '' 'if-shell "tmux break-pane -t 0" "move-window -t :1" "move-window -t :1" '
bind-key M-2 if-shell 'tmux move-pane -h -t :2' '' 'if-shell "tmux break-pane -t 0" "move-window -t :2" "move-window -t :2" '
bind-key M-3 if-shell 'tmux move-pane -h -t :3' '' 'if-shell "tmux break-pane -t 0" "move-window -t :3" "move-window -t :3" '
bind-key M-4 if-shell 'tmux move-pane -h -t :4' '' 'if-shell "tmux break-pane -t 0" "move-window -t :4" "move-window -t :4" '
bind-key M-5 if-shell 'tmux move-pane -h -t :5' '' 'if-shell "tmux break-pane -t 0" "move-window -t :5" "move-window -t :5" '
bind-key M-6 if-shell 'tmux move-pane -h -t :6' '' 'if-shell "tmux break-pane -t 0" "move-window -t :6" "move-window -t :6" '
bind-key M-7 if-shell 'tmux move-pane -h -t :7' '' 'if-shell "tmux break-pane -t 0" "move-window -t :7" "move-window -t :7" '
bind-key M-8 if-shell 'tmux move-pane -h -t :8' '' 'if-shell "tmux break-pane -t 0" "move-window -t :8" "move-window -t :8" '
bind-key M-9 if-shell 'tmux move-pane -h -t :9' '' 'if-shell "tmux break-pane -t 0" "move-window -t :9" "move-window -t :9" '
bind-key M-k move-pane -t ':+'
bind-key M-j move-pane -t ':-'

# Use vim keybindings in copy mode
set-window-option -g mode-keys vi

# Update default binding of `Enter` and `Space to also use copy-pipe
unbind-key -T copy-mode-vi Enter
unbind-key -T copy-mode-vi Space

bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down

# begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle

# copy text in copy mode
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel

# reload Tmux configuration
bind-key R source-file ~/.tmux.conf \; display-message "Config reloaded."

# popup for sessions and ssh servers
bind-key C display-popup -E "tmux-commands | xargs tmux new-window"
bind-key V display-popup -E "tmux-commands | xargs tmux split-window -v"
bind-key X display-popup -E "tmux-commands | xargs tmux split-window -h"

# shortcut for synchronize-panes toggle
bind-key I set-window-option synchronize-panes

# set fish as default shell if available
if-shell "test -e /usr/bin/fish" "set-option -g default-shell /usr/bin/fish"
if-shell "test -e /usr/local/bin/fish" "set-option -g default-shell /usr/local/bin/fish"

# if remoted in (via ssh), customize some things for convenient nesting
if-shell 'test -z "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.conf.local'
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.conf.remote'
